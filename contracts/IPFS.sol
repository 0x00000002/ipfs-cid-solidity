// SPDX-License-Identifier: MIT

pragma solidity ^0.8.26;

import "@base58-solidity/Base58.sol";

bytes constant ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";

/**
 * Based on https://github.com/storyicon/base58-solidity/blob/master/contracts/Base58.sol
 */
contract IPFS {
    /**
     * @notice cidv0 is used to convert sha256 hash to cid(v0) used by IPFS.
     * @param sha256Hash_ sha256 hash generated by anything.
     * @return IPFS cid that meets the TokenData0 specification.
     */
    function cidv0(bytes32 sha256Hash_) public pure returns (string memory) {
        bytes memory hashString = new bytes(34);
        hashString[0] = 0x12;
        hashString[1] = 0x20;
        uint256 hashLength = sha256Hash_.length;
        for (uint256 i = 0; i < hashLength; ++i) {
            hashString[i + 2] = sha256Hash_[i];
        }
        return Base58.encodeToString(hashString);
    }
}
